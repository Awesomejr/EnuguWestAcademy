"""
Django settings for Config project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import pymysql
from decouple import config

from utilities import customVars

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if customVars.SERVER_TYPE == "development":
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = ["127.0.0.1", "localhost", "enuguwestacademy.org", "www.enuguwestacademy.org"]


# Application definition
INSTALLED_APPS = [
    'jazzmin',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

UTILITY_APPS =[
    'tailwind',
    'theme',
    'debug_toolbar',
    # 'crispy_forms',
    # 'crispy_tailwind',
    # 'formtools',
]

MY_APPS = [
    'base.apps.BaseConfig',
    'examination.apps.ExaminationConfig',
    'techSupport.apps.TechsupportConfig',
    'student.apps.StudentConfig',
    'teacher.apps.TeacherConfig',
    'guest.apps.GuestConfig',
    'manager.apps.ManagerConfig',
    'gallery.apps.GalleryConfig',
    'news.apps.NewsConfig',
    'library.apps.LibraryConfig',
    'blog.apps.BlogConfig',
    'attendance.apps.AttendanceConfig',
]

THIRD_PARTY_APPS =[
    'imagekit',
    'django_admin_logs',
    'login_history',
    'request',
    'django_htmx',
    # # 'defender',
    'django_browser_reload',
    'hijack',
    'hijack.contrib.admin',
    'django_extensions',
    'ckeditor',
]

INSTALLED_APPS += UTILITY_APPS + MY_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'request.middleware.RequestMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
    "django_htmx.middleware.HtmxMiddleware",
    # 'defender.middleware.FailedLoginMiddleware',
    'hijack.middleware.HijackUserMiddleware',
]

ROOT_URLCONF = 'Config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "static"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                "base.context_processors.getCurrentYear",
                "base.context_processors.getCurrentMonth",
                "base.context_processors.sessionContext",
                "base.context_processors.siteName",
            ],
        },
    },
]

WSGI_APPLICATION = 'Config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

pymysql.install_as_MySQLdb()

if customVars.SERVER_TYPE == "development" and customVars.DATABASE_TYPE == "sqlite3":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif customVars.SERVER_TYPE == "development" and customVars.DATABASE_TYPE == "mysql":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config("DATABASE_NAME"),
            'USER': config("DATABASE_USER"),
            'PASSWORD' : config("DATABASE_PASSWORD"),
            'HOST' : '127.0.0.1',
            'Port' : 3306,
        }
    }
elif customVars.SERVER_TYPE == "production" and customVars.DATABASE_TYPE == "mysql":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config("PRODUCTION_DATABASE_NAME"),
            'USER': config("PRODUCTION_DATABASE_USER"),
            'PASSWORD' : config("PRODUCTION_DATABASE_PASSWORD"),
            'HOST' : '127.0.0.1',
            'Port' : 3306,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "base.CustomUser"
LOGIN_REDIRECT_URL = "base:home"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# MY CUSTOM CONFIG
# Console Email
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Tailwind Config
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]
NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"


# Debug Tool Bar Config
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.history.HistoryPanel',
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.alerts.AlertsPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
]


# Logging Config
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "sitelogs", config("DJANGO_LOG_FILENAME")),
            "level": config("DJANGO_LOG_LEVEL"),
            "formatter": "advanced"
        },

        "console": {
            "class": "logging.StreamHandler",
            "level": config("DJANGO_LOG_LEVEL"),
            "formatter": "advanced"
        }
    },


    "loggers": {
        "": {
            "level": config("DJANGO_LOG_LEVEL"),
            "handlers": ["file", "console"]
        }
    },


    "formatters": {
        "simple": {
            "format": "[Site logging] {asctime}: {levelname} {message}",
            "style": "{"
        },

        "advanced": {
            "format": "[Site logs] {asctime}: {levelname} - {name} {module}.py (line {lineno:d}). {message}",
            "style": "{"
        }
    }

}


# Jazzmin PottersHouse
WEBSITE_LOGO_NAME = "Enugu West Academy"
WEBSITE_LOGO = os.path.join(BASE_DIR, "static/images/logo/site_logo.png")

JAZZMIN_SETTINGS = {
    "site_header": f"{WEBSITE_LOGO_NAME}",

    "site_title": f"{WEBSITE_LOGO_NAME}",
    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": f"{WEBSITE_LOGO_NAME} Admin",
    "site_logo": WEBSITE_LOGO,
    "login_logo": WEBSITE_LOGO,
    # "site_logo_classes": "img-circle",
    "welcome_sign": f"Welcome to {WEBSITE_LOGO_NAME}",
    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": WEBSITE_LOGO,  # Top left

    # "user_avatar": "user_avatar",

    # Whether to display the side menu
    "show_sidebar": True,
    # Whether to aut expand the menu
    "navigation_expanded": False,
    # Hide these apps when generating side menu e.g (auth)
    # "hide_apps": ["auth"],
    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "base"},
        {"app": "attendance"},
        {"app": "examination"},
        {"app": "blog"},
        {"app": "news"},
        {"app": "library"},
        {"app": "gallery"},

        # View the website
        {"name": "Go to site", "url": "base:home", "new_window": True},

        # model admin to link to (Permissions checked against model)
        {"model": "auth.CustomUser"},

        # external url that opens in a new window (Permissions can be added)
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},

    ],
    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string
    # "search_model": ["auth.CustomUser"],

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user"}
    ],

    # Whether to show the UI customizer on the sidebar
    # "show_ui_builder": True,
    "show_ui_builder": True,

    # Copyright on the footer
    "copyright": f"{WEBSITE_LOGO_NAME}",

    "change_form_format": "vertical_tabs",
}


JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": True,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": True,
    "sidebar_nav_flat_style": True,
    "theme": "darkly",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}
